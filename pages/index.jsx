import Head from "next/head";
import LoginButton from "../components/login-btn";
import { getSession } from "next-auth/react";
import GrocerySearch from "../components/GrocerySearch";
import GroceryList from "../components/GroceryList";
import { useState } from "react";
import { PrismaClient } from "@prisma/client";

export default function Home({ session, listitems }) {
  const [itemList, setItemList] = useState(listitems);

  async function getItems() {
    try {
      let items = await fetch("api/getListItems");
      items = await items.json();
      setItemList(items)
    } catch (error) {
      console.error(error);
    }
  }

  return (
    <>
      <Head>
        <title>Grocery List</title>
        <meta name="description" content="Generated by create next app" />
        <link
          rel="icon"
          href="https://www.shareicon.net/data/128x128/2016/05/05/760099_food_512x512.png"
        />
      </Head>

      <main>
        <style jsx global>{`
          body {
            font-family: sans-serif;
          }
          main {
            display: flex;
            align-items: center;
            flex-direction: column;
          }
          .mainHeader {
            background-color: white;
            padding: 5px;
            border-radius: 2%;
          }
        `}</style>
        <LoginButton/>
        <h1 className="mainHeader">Welcome to your Grocery List!</h1>
        <GrocerySearch getItems={getItems}/>
        <GroceryList itemList={itemList} setItemList={setItemList}/>
      </main>
    </>
  );
}

export async function getServerSideProps({ req }) {
  const session = await getSession({ req });

  if (!session) {
    return {
      redirect: {
        destination: "/api/auth/signin",
        permanent: false,
      },
    };
  }

  const prisma = new PrismaClient()
    try {
      var listitems = await prisma.listItem.findMany({
        where: {
          userId: session.user.id
        }
      })
      await prisma.$disconnect()
    } catch (error) {
      console.error(error)
      await prisma.$disconnect()
      process.exit(1)
    }

  return {
    props: {
      session,
      listitems
    },
  };
}
